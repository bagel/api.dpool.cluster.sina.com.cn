#!/usr/bin/env python

import sys
import os
import re


env = {
    'REDIS_HOST': '127.0.0.1',
    'REDIS_PORT': '6379',
    'MEMCACHE_SERVERS': '10.29.10.227:7601',
}
os.environ.update(env)

path = os.path.dirname(os.path.realpath(__file__))
libs = [
    os.path.join(os.path.dirname(path), 'libs'),
    path,
]
[ sys.path.append(lib) for lib in libs if lib not in sys.path ]


def application(environ, start_response):
    environ.update(os.environ)
    ctype = 'text/plain; charset=utf-8'
    if re.match(r'/test', environ['PATH_INFO']):
        import test
        ctype, response_body = test.urls(environ)
    elif re.match(r'/purge', environ['PATH_INFO']):
        import purge
        ctype, response_body = purge.urls(environ)
    elif re.match(r'/vhost', environ['PATH_INFO']):
        import vhost
        ctype, response_body = vhost.urls(environ)
    elif re.match(r'/vhost1', environ['PATH_INFO']):
        import vhost1
        ctype, response_body = vhost1.urls(environ)
    elif environ['PATH_INFO'] == '/env':
        response_body = ''
        for key, value in sorted(environ.items()):
            response_body += "%s => %s\n" % (key, value)
    elif environ['PATH_INFO'] == '/os':
        response_body = ''
        for key, value in sorted(os.environ.items()):
            response_body += "%s => %s\n" % (key, value)
    elif environ['PATH_INFO'] == '/online':
        import tools
        ctype, response_body = tools.online(environ)
    elif environ['PATH_INFO'] == '/ip':
        import ip
        ctype, response_body = ip.urls(environ)
    elif environ['PATH_INFO'] == '/publish':
        import tools
        ctype, response_body = tools.publish(environ)
    elif environ['PATH_INFO'] == '/ok':
        response_body = "ok"
    elif environ['PATH_INFO'] == '/mon':
        import mon
        ctype, response_body = mon.urls(environ)
    elif re.match(r'/status', environ['PATH_INFO']):
        import status
        ctype, response_body = status.urls(environ)
    elif environ['PATH_INFO'] == '/home':
        import status
        ctype, response_body = status.urls(environ)
    elif re.match(r'/info', environ['PATH_INFO']):
        import info
        ctype, response_body = info.urls(environ)
    elif re.match(r'/config', environ['PATH_INFO']):
        import config
        ctype, response_body = config.urls(environ)
    else:
        response_body = 'It works!'

    response_headers = [('Content-Type', ctype), ('Content-Length', str(len(response_body)))]
    status = '200 OK'
    start_response(status, response_headers)
    return [response_body]
